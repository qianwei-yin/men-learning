const mongoose = require('mongoose');
const dotenv = require('dotenv');

process.on('uncaughtException', (err) => {
    console.log('UNCAUGHT EXCEPTION! Shutting down...');
    console.log(err.name, err.message);
    process.exit(1);
});

dotenv.config({ path: './config.env' });

const app = require('./app');

const DB = process.env.DATABASE.replace('<PASSWORD>', process.env.DATABASE_PASSWORD);
mongoose
    .connect(DB, {
        useNewUrlParser: true,
        useCreateIndex: true,
        useFindAndModify: false,
        useUnifiedTopology: true,
    })
    .then(() => {
        console.log('DB connection successful!');
    });

// 4) Start Server
const port = process.env.PORT || 3000;
const server = app.listen(port, () => {
    console.log(`App running on port ${port}...`);
});

// For rejected promises OUTSIDE of Express app, we can do so...
// Create an event listener
process.on('unhandledRejection', (err) => {
    console.log('UNHANDLED REJECTION! Shutting down...');
    console.log(err.name, err.message);
    // process.exit(1); // But this is rude
    // We can first close the server and then shut down the app
    server.close(() => {
        process.exit(1);
    });
});

/*
Uncaught Exception is when you throw an error and did not catch anywhere.
Unhandled promise rejection is similar, when you fail to catch a Promise.reject.

It's about whether the error was generated by throw or by Promise.reject (more like error generate from sync vs async process/code). Note that throw inside an async function is Promise.reject as async functions are wrapped inside Promise for you
*/
